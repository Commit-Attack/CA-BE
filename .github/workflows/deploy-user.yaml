name: 'Deploy commit attack user server'

on:
  pull_request:
    branches: [ main ]
  push:
    branches:
      - main
    paths:
      - 'user/**'
      - '.github/workflows/deploy-user.yaml'
  workflow_dispatch:

env:
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

jobs:
  run_cd_build_container:
    name: 'Build Container'
    runs-on: ubuntu-latest
    outputs:
      IMAGE_SHA: ${{ env.IMAGE_SHA }}
      BRANCH_NAME_TAG: ${{ env.BRANCH_NAME_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew And Build with Gradle
        run: chmod +x ./gradlew && ./gradlew user:bootJar --i
        env:
          GITHUB_USER: ${{ secrets.PACKAGE_OWNER }}
          GITHUB_TOKEN: ${{ secrets.PACKAGE_SECRET }}

      - name: Set Image SHA, branch name
        env:
          SOURCE_BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "IMAGE_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BRANCH_NAME_TAG=$(echo "$SOURCE_BRANCH_NAME" | sed 's/-/_/g')" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Sign in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to Amazon ECR
        run: |
          docker build -t $ECR_REPOSITORY:latest .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Create Dockerrun.aws.json file using ECR image
        run: |
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "'$ECR_REGISTRY'/'$ECR_REPOSITORY':latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "8080",
                "HostPort": "5000"
              }
            ]
          }' > Dockerrun.aws.json

      - name: Upload Dockerrun.aws.json file to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          aws s3 cp Dockerrun.aws.json s3://$AWS_S3_BUCKET/dev/Dockerrun-${{ github.sha }}.aws.json

      - name: Continuous Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          aws elasticbeanstalk create-application-version --application-name commit-attack-application --version-label ${{ github.sha }} --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key="dev/Dockerrun-${{ github.sha }}.aws.json"
          aws elasticbeanstalk update-environment --application-name commit-attack-application --environment-name commit-attack-application-env --version-label ${{ github.sha }}